This document is organized as a research log, so don't expect early entries to
be complete or correct. (Or late ones.)

-------------------------------------------------------------------------------

Enumerating IR values produces the following list:

TAP #0: IR[10]
  IR=0000000000 DR[96]
  IR=0001010101 DR[96]
  IR=0001011001 DR[32]
  IR=0110110011 DR[16]
  IR=1001110000 DR[16]
  IR=1010000000 DR[10]
  IR=1010010000 DR[?]
  IR=1010010001 DR[?]
  IR=1010010010 DR[?]
  IR=1010010011 DR[?]
  IR=1010010100 DR[?]
  IR=1010010101 DR[?]
  IR=1010010110 DR[?]
  IR=1010010111 DR[?]
  IR=1010100001 DR[11]
(the rest being DR[1])

Based on BSDL information, it can be attributed as:

  * 0000000000 (000): EXTEST
  * 0001010101 (055): SAMPLE
  * 0001011001 (059): IDCODE
  * 0110110011 (1b3): UNKNOWN1
  * 1001110000 (270): UNKNOWN2
  * 1010000000 (280): UNKNOWN3.0
  * ...
  * 1010000111 (287): UNKNOWN3.7
  * 1010100001 (2a1): UNKNOWN4

Looking at erase SVF, it performs the following actions:

  * IR=280 DR[10]=1b9
  * IR=059 DR[32]==0150203f ; IDCODE check
  * IR=2b3
  * IR=29e RTI=210ms ; erase
  * IR=2bf RTI=50ms
  * (reset)
  * IR=280 DR[10]=000
  * (bunch of resets)
  * IR=280 DR[10]=1b9
  * repeated for adr=[00c..06b,080..0df,000..00b,0e0..0e4]:
    * IR=2a1 DR[11]=adr IR=28c RTI=20ms IR=290 DR[86]=3fffffffffffffffffffff
  * IR=2a1 DR[11]=200 IR=28c RTI=20ms IR=290 DR[4]=f
  * IR=2a1 DR[11]=300 IR=28c RTI=20ms IR=290 DR[16]=ffff
  * IR=2a1 DR[11]=100 IR=28c RTI=20ms IR=290 DR[32]=ffffffff

It looks like the flash memory uses IRs in the 280..2ff range, assigned as:
  * IR=280 DR[10]: flash unlock key (?)
  * IR=2b3 DR[1]:  unknown
  * IR=29e DR[1]:  flash erase command (?)
  * IR=2a1 DR[11]: flash index
  * IR=28c DR[1]:  flash read command
  * IR=290 DR[n]:  flash read data (?)

It is likely that the flash indexes are assigned as:
  * 200: JTAG configuration (4 bits)
  * 300: user electronic signature (16 bits)
  * 100: device configuration (32 bits)
  * 00c..06b, 080..0df: product term config? (86×96×2 bits)
  * 000..00b: macrocell config? (86×12 bits)
  * 0e0..0e4: switch matrix config? (86×5 bits)

To recap, the JED file is organized as follows:
  * 96(16 padding, 40+40 term bits)×5(product terms)×16(macrocells)×2(blocks):
    product term config
  * 80(16 padding, 32+32 config bits)×6(config blocks)×2(blocks):
    macrocell config
  * 86(5(mux bits)×40(muxes)×2(blocks), 5(mux bits)×6(global OEs)):
    switch matrix config

It looks like the switch matrix is transposed: in the JED file it is written
in row-major order (5x86) and in the SVF file it is written in column-major
order (86x5). It seems likely that the rest of the flash is also transposed,
but it is not clear yet what function the padding bits have or how are product
terms laid out exactly.

-------------------------------------------------------------------------------

At this point I decided to map out JED<>SVF permutation first, since it didn't
look like it was something simple. See util/patgen.py and util/patmatch.py as
well as docs/bitmap/ for details.

-------------------------------------------------------------------------------

A discussion with a very good dog, and a careful reading of ATF15xxAE datasheet
yielded a sentence where it claimed to support IEEE 1532 and have 7 ISP JTAG
instructions. This has been scrubbed from later documents, but the die I have
has masks dated 1999, so it very likely has those same ISP instructions.

The SVF file has the following unique SIR commands:

  SIR 10 TDI (059);
  SIR 10 TDI (280);
  SIR 10 TDI (28c);
  SIR 10 TDI (290);
  SIR 10 TDI (291);
  SIR 10 TDI (292);
  SIR 10 TDI (293);
  SIR 10 TDI (29e);
  SIR 10 TDI (2a1);
  SIR 10 TDI (2b3);
  SIR 10 TDI (2bf);

By noticing that 059 is IDCODE and grouping 290..293 into one instruction
(these are all used to program different areas of flash), we arrive at a list
of, indeed, 7 instructions:

  1. 280
  2. 28c
  3. 290(..293)
  4. 29e
  5. 2a1
  6. 2b3
  7. 2bf

Register 280 is loaded with 1b9 before ISC operations and with 000 after them.
Register 2a1 contains a flash word address. Register 290 is used to shift data
in and out. Register 28c is used to read a word. Register 29e is used to both
program a word or erase the entire flash. Register 2b3 is used to specify
an erase operation. Register 2bf has unclear use, but likely is a status
register. I propose the following register map:

  1. 280: ATF_CONFIG
  2. 28c: ATF_READ
  3. 290(..293): ATF_DATA
  4. 29e: ATF_PROGRAM_ERASE
  5. 2a1: ATF_ADDRESS
  6. 2b3: ATF_LATCH_ERASE
  7. 2bf: ATF_STATUS

There is also an instruction for reading UES:

  0. 270: ATF_READ_UES

The programming flow for ATF1502 is as follows:

  1. Enable:
      SIR ATF_CONFIG
      SDR 10'1b9
  2. Disable:
      SIR ATF_CONFIG
      SDR 10'000
  3. Erase:
      SIR ATF_LATCH_ERASE
      SIR ATF_PROGRAM_ERASE
      RTI 210ms
      SIR ATF_STATUS
      SDR ?
  4. Program word:
      SIR ATF_ADDRESS
      SDR $addr
      SIR ATF_DATA|($addr>>8)
      SDR $data
      SIR ATF_PROGRAM_ERASE
      RTI 30ms
      SIR ATF_STATUS
      SDR ?
  5. Read word:
      SIR ATF_ADDRESS
      SDR $addr
      SIR ATF_READ
      RTI 20ms
      SIR ATF_DATA|($addr>>8)
      SDR =$data
  6. Read UES:
      SIR ATF_READ_UES
      RTI 20ms
      SDR $ues
